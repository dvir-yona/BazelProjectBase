#!/bin/bash

set -e

# --- Configuration ---
OUTPUT_BAZELRC=".bazelrc"
MANUAL_BAZELRC="manual.bazelrc"
DEFAULT_CLANG_CC="clang"
DEFAULT_CLANG_CXX="clang++"

# --- Helper Functions ---
log_info() {
    echo "INFO: $1"
}

log_warn() {
    echo "WARN: $1"
}

log_error() {
    echo "ERROR: $1" >&2
    exit 1
}

get_cpu_vendor() {
    local vendor=""
    if command -v lscpu >/dev/null 2>&1; then
        vendor=$(lscpu | grep "Vendor ID:" | awk '{print $3}')
    elif command -v sysctl >/dev/null 2>&1 && sysctl -n machdep.cpu.vendor >/dev/null 2>&1; then
        vendor=$(sysctl -n machdep.cpu.vendor)
    else
        log_warn "Cannot determine CPU vendor. lscpu and sysctl not found or unsupported."
        vendor="Unknown"
    fi
    echo "$vendor"
}

# --- Main Logic ---

log_info "Starting Bazel toolchain setup..."

CPU_VENDOR=$(get_cpu_vendor)
log_info "Detected CPU Vendor: $CPU_VENDOR"

USE_AOCC="no"
AOCC_PATH_VALID="no"
AOCC_INSTALL_PATH=""

if [[ "$CPU_VENDOR" == "AuthenticAMD" ]]; then
    log_info "AMD CPU detected."
    read -r -p "Do you want to try using AOCC (AMD Optimizing C/C++ Compiler)? (yes/no) [no]: " use_aocc_answer
    if [[ "${use_aocc_answer,,}" == "yes" || "${use_aocc_answer,,}" == "y" ]]; then
        USE_AOCC="yes"
        while [[ "$AOCC_PATH_VALID" == "no" ]]; do
            read -r -p "Enter the full path to your AOCC installation directory (e.g., /opt/AMD/aocc-compiler-4.1.0): " AOCC_INSTALL_PATH
            if [[ -z "$AOCC_INSTALL_PATH" ]]; then
                log_warn "AOCC path cannot be empty."
            elif [[ -x "$AOCC_INSTALL_PATH/bin/clang" && -x "$AOCC_INSTALL_PATH/bin/clang++" ]]; then
                AOCC_PATH_VALID="yes"
                log_info "AOCC path seems valid: $AOCC_INSTALL_PATH"
            else
                log_warn "Could not find AOCC clang/clang++ at $AOCC_INSTALL_PATH/bin/"
                log_warn "Please ensure the path is correct and AOCC is installed there."
                read -r -p "Try again? (yes/no) [yes]: " try_again
                if [[ "${try_again,,}" == "no" || "${try_again,,}" == "n" ]]; then
                    USE_AOCC="no" # Fallback to clang
                    log_info "Proceeding with Clang as the default compiler."
                    break
                fi
            fi
        done
    else
        log_info "Proceeding with Clang as the default compiler."
    fi
else
    log_info "Non-AMD CPU detected or vendor unknown. Using Clang as the default compiler."
fi

# --- Generate .bazelrc content ---

GENERATED_CONFIG="# --- WARNING, THIS FILE IS GENERATED, USE manual.bazelrc INSTEAD ---\n"

GENERATED_CONFIG+=$(cat <<EOF
# --- Generated by setup_bazel_toolchain.sh ---
# Common build flags (apply to all configurations)
# Add any project-wide common flags here. For example:
# build --cxxopt="-std=c++17"
# build --copt="-Wall"
# build --linkopt="-L/custom/lib/path"
# build --action_env=BAZEL_CXXOPTS="-std=c++17" # Bazel 5+ way to set std

# Enable platform-specific configurations (important for selecting :aocc or :clang below)
build --enable_platform_specific_config

# --- Clang Configuration (default if not overridden) ---
build:clang --config=compiler_clang
test:clang --config=compiler_clang
run:clang --config=compiler_clang

common --crosstool_top=@bazel_tools//tools/cpp:toolchain_type # Use default Bazel C++ toolchain definition
build --define=COMPILER=clang # For Starlark rules to query

build:compiler_clang --action_env=CC="$DEFAULT_CLANG_CC"
build:compiler_clang --action_env=CXX="$DEFAULT_CLANG_CXX"
# Add any specific Clang flags if needed
# build:compiler_clang --copt="-fsanitize=address"
# build:compiler_clang --linkopt="-fsanitize=address"
EOF
)

if [[ "$USE_AOCC" == "yes" && "$AOCC_PATH_VALID" == "yes" ]]; then
    AOCC_CLANG="$AOCC_INSTALL_PATH/bin/clang"
    AOCC_CLANGXX="$AOCC_INSTALL_PATH/bin/clang++"
    # Attempt to determine the best -march flag for AMD CPUs
    # This is a heuristic; users might want to fine-tune it.
    AOCC_MARCH_FLAG="-march=native" # General good default for performance
    # You could add more sophisticated detection for specific Zen versions if needed
    # e.g. if grep -q "znver3" /proc/cpuinfo; then AOCC_MARCH_FLAG="-march=znver3"; fi

    GENERATED_CONFIG+=$(cat <<EOF

# --- AOCC Configuration ---
build:aocc --config=compiler_aocc
test:aocc --config=compiler_aocc
run:aocc --config=compiler_aocc

build --define=COMPILER=aocc # For Starlark rules to query if aocc is selected

build:compiler_aocc --action_env=CC="$AOCC_CLANG"
build:compiler_aocc --action_env=CXX="$AOCC_CLANGXX"
# AOCC specific flags. -march=native is often good for performance.
# Adjust based on your specific AMD CPU generation (e.g., znver2, znver3, znver4)
build:compiler_aocc --copt="$AOCC_MARCH_FLAG"
build:compiler_aocc --copt="-O3" # Example optimization flag
build:compiler_aocc --copt="-fuse-ld=lld" # AOCC often works well with LLD
build:compiler_aocc --linkopt="-fuse-ld=lld"
# If AOCC provides specific libraries you need to link against:
# build:compiler_aocc --linkopt="-L$AOCC_INSTALL_PATH/lib"
# build:compiler_aocc --linkopt="-Wl,-rpath,$AOCC_INSTALL_PATH/lib" # For runtime
EOF
)
    # Set AOCC as the default configuration
    GENERATED_CONFIG+=$(cat <<EOF

# --- Default Compiler Selection ---
# Select AOCC as the default since it was chosen
build --config=aocc
test --config=aocc
run --config=aocc
EOF
)
else
    # Set Clang as the default configuration
    GENERATED_CONFIG+=$(cat <<EOF

# --- Default Compiler Selection ---
# Select Clang as the default
build --config=clang
test --config=clang
run --config=clang
EOF
)
fi

GENERATED_CONFIG+=$(cat <<EOF

# --- End of Generated by setup_bazel_toolchain.sh ---
EOF
)

# --- Write to .bazelrc ---
log_info "Writing generated configuration to $OUTPUT_BAZELRC..."
echo "$GENERATED_CONFIG" > "$OUTPUT_BAZELRC"

if [[ -f "$MANUAL_BAZELRC" ]]; then
    log_info "Appending content from $MANUAL_BAZELRC..."
    echo "" >> "$OUTPUT_BAZELRC" # Add a newline for separation
    echo "# --- Content from $MANUAL_BAZELRC ---" >> "$OUTPUT_BAZELRC"
    cat "$MANUAL_BAZELRC" >> "$OUTPUT_BAZELRC"
    echo "# --- End of Content from $MANUAL_BAZELRC ---" >> "$OUTPUT_BAZELRC"
else
    log_info "$MANUAL_BAZELRC not found, skipping."
fi

log_info "Setup complete! $OUTPUT_BAZELRC has been generated."
log_info "You can switch compilers manually using:"
log_info "  bazel build --config=clang //..."
if [[ "$USE_AOCC" == "yes" && "$AOCC_PATH_VALID" == "yes" ]]; then
log_info "  bazel build --config=aocc //..."
fi
